/*
 * Copyright 2017 The Android Open Source Project
 * Copyright 2018 The LineageOS Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define LOG_TAG "android.hardware.camera.provider@2.4-service.griffin"

#include <android/hardware/camera/provider/2.4/ICameraProvider.h>
#include <hidl/LegacySupport.h>

#include <sensor/SensorManager.h>
#include <cutils/properties.h>

using android::hardware::camera::provider::V2_4::ICameraProvider;
using android::hardware::defaultPassthroughServiceImplementation;

static bool can_talk_to_sensormanager()
{
    android::SensorManager& sensorManager(android::SensorManager::getInstanceForPackage(android::String16("camera")));
    android::Sensor const * const * sensorList;
    return sensorManager.getSensorList(&sensorList) >= 0;
}

int main()
{
    ALOGI("Camera provider Service is starting.");
    // mm-qcamera-daemon blocks until initialization of sensorservice
    // and might miss V4L events generated by the HAL during that time,
    // causing HAL initialization failures. Avoid those failures by waiting
    // for sensorservice initialization before opening the HAL.
    if (!can_talk_to_sensormanager()) {
        property_set("hw.sensors.ready","0");
        ALOGE("%s: Waiting for sensor service failed.", __FUNCTION__);
    }
    property_set("hw.sensors.ready","1");
    return defaultPassthroughServiceImplementation<ICameraProvider>("legacy/0", /*maxThreads*/ 6);
}
